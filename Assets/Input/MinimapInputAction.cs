//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/MinimapInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MinimapInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MinimapInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MinimapInputAction"",
    ""maps"": [
        {
            ""name"": ""Mini Map"",
            ""id"": ""f735bb99-aed4-42a9-87cd-0215f5619ef3"",
            ""actions"": [
                {
                    ""name"": ""Max"",
                    ""type"": ""Button"",
                    ""id"": ""8313ad3e-ce0f-4aa6-a411-a47eede683ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""4eb5e4a6-03a9-42d4-bce7-23e588fc7499"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""efadb5cd-de7f-4e7a-b2f5-45057575c141"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Max"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e1c616a-f741-430d-bb96-42d4865a4cc7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mini Map
        m_MiniMap = asset.FindActionMap("Mini Map", throwIfNotFound: true);
        m_MiniMap_Max = m_MiniMap.FindAction("Max", throwIfNotFound: true);
        m_MiniMap_Zoom = m_MiniMap.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mini Map
    private readonly InputActionMap m_MiniMap;
    private IMiniMapActions m_MiniMapActionsCallbackInterface;
    private readonly InputAction m_MiniMap_Max;
    private readonly InputAction m_MiniMap_Zoom;
    public struct MiniMapActions
    {
        private @MinimapInputAction m_Wrapper;
        public MiniMapActions(@MinimapInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Max => m_Wrapper.m_MiniMap_Max;
        public InputAction @Zoom => m_Wrapper.m_MiniMap_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_MiniMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniMapActions set) { return set.Get(); }
        public void SetCallbacks(IMiniMapActions instance)
        {
            if (m_Wrapper.m_MiniMapActionsCallbackInterface != null)
            {
                @Max.started -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnMax;
                @Max.performed -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnMax;
                @Max.canceled -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnMax;
                @Zoom.started -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_MiniMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Max.started += instance.OnMax;
                @Max.performed += instance.OnMax;
                @Max.canceled += instance.OnMax;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public MiniMapActions @MiniMap => new MiniMapActions(this);
    public interface IMiniMapActions
    {
        void OnMax(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
