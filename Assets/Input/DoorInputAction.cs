//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/DoorInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DoorInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DoorInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DoorInputAction"",
    ""maps"": [
        {
            ""name"": ""Door"",
            ""id"": ""1d6d86e5-5b1a-4735-8176-50b5deb7e816"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""2bf70812-8d40-4981-8932-a57afff4f7d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57769491-15aa-4059-851d-1b9f32ad8655"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2997ca43-031d-46f6-97c3-24357705f6d9"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Door
        m_Door = asset.FindActionMap("Door", throwIfNotFound: true);
        m_Door_Grab = m_Door.FindAction("Grab", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Door
    private readonly InputActionMap m_Door;
    private IDoorActions m_DoorActionsCallbackInterface;
    private readonly InputAction m_Door_Grab;
    public struct DoorActions
    {
        private @DoorInputAction m_Wrapper;
        public DoorActions(@DoorInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_Door_Grab;
        public InputActionMap Get() { return m_Wrapper.m_Door; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DoorActions set) { return set.Get(); }
        public void SetCallbacks(IDoorActions instance)
        {
            if (m_Wrapper.m_DoorActionsCallbackInterface != null)
            {
                @Grab.started -= m_Wrapper.m_DoorActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_DoorActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_DoorActionsCallbackInterface.OnGrab;
            }
            m_Wrapper.m_DoorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
            }
        }
    }
    public DoorActions @Door => new DoorActions(this);
    public interface IDoorActions
    {
        void OnGrab(InputAction.CallbackContext context);
    }
}
